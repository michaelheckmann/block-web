datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model Workout {
  id        Int        @id @default(autoincrement())
  name      String
  done      Boolean
  setGroups SetGroup[]

  templateId Int?
  template   Template? @relation(fields: [templateId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model SetGroup {
  id   Int   @id @default(autoincrement())
  sets Set[]

  exerciseId Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id])

  workoutId Int
  workout   Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)

  order Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Set {
  id     Int     @id @default(autoincrement())
  weight Int?
  reps   Int?
  done   Boolean

  setGroupId Int
  setGroup   SetGroup @relation(fields: [setGroupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Exercise {
  id   Int    @id @default(autoincrement())
  name String

  setGroups SetGroup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Template {
  id   Int    @id @default(autoincrement())
  name String

  workouts Workout[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model User {
  id                  Int              @id @default(autoincrement())
  email               String           @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  webAuthnChallenge   String?          @unique
  credentials         UserCredential[]
}

model UserCredential {
  id         String  @id
  userId     Int
  user       User    @relation(fields: [userId], references: [id])
  publicKey  Bytes
  transports String?
  counter    BigInt
}
